First:
1. For this branch, finish each piece's #available_moves (start with rook, the logic for it is starting in validator.rb) then GameBuilder's #build_starting_board_new

Then:
1. Refactor the valid destination list methods (notes in move_validation_solutions.txt)

how to fix pawn movement problem: during validate destinations step, only add diagonals if end cell is occupied by opp's piece

1. continue Chess#player_action_sequence from line 54
  - be sure to keep writing tests as you go!

2.look at project_plan/chess_psuedocode.txt and continue from where you are

3. W/e order for these:
  - consider moving converter methods from chess to another class
  - I think you can remove the #convert_notation_to_column_index and #convert_notation_to_row_index tests in chess_spec.rb and then move those methods to private b/c eventually a public method is going to call them where they will be tested
  - clean up MoveValidator#validation list methods
  - figure out what to do with pawn movement - how to know account for diagonal jumps? Currently its considered a valid move, but should only be if there is an opp's pawn to capture. Be sure to update tests once you fix this
  - Write tests
  - Finish board design, see last commit for more info
  - can I make symbols bigger?
  - for Interface#solicit_player_action, create some mechanism that allows the player to enter 'help' for instructions about Chess notation

4. At the end, re-read the illustrated chess rules site to see if I missed anything

5. at the end use the rubocop command line thing, also read through everything and refactor

Extras
  - Decide player color randomly
  - Add functionality for special moves - Castling, En passant, Promotion
  - Code for standard chess notation: see branch standard_notation
