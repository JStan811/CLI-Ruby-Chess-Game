I originally wrote these tests in chess_spec.rb but later made the methods private:

  def convert_notation_to_column_index(notated_cell)
    notated_cell_as_char_array = notated_cell.split('')
    notated_column = notated_cell_as_char_array[0]
    char_codepoint = notated_column.ord
    char_codepoint - 97
  end

  def convert_notation_to_row_index(notated_cell)
    notated_cell_as_char_array = notated_cell.split('')
    notated_row = notated_cell_as_char_array[1].to_i
    notated_row - 1
  end

Used these for testing before I had a board display:

  def pretty_print_board_text(board)
    board.cells.each_with_index do |row, index|
      print "row #{index + 1}: "
      row.each do |cell|
        if cell.piece.nil?
          print 'empty '
        else
          print "#{cell.piece.color} #{cell.piece.class} "
        end
      end
      puts
    end
  end

  def pretty_print_board_symbols
    @board.cells.each_with_index do |row, index|
      print "row #{index + 1}: "
      row.each do |cell|
        if cell.piece.nil?
          print 'empty '
        else
          print "#{cell.piece.symbol} "
        end
      end
      puts
    end
  end

These were at the bottom of my Chess class but weren't used anywhere. Not sure why I had them:

  def determine_piece_type_from_notated_cell(player_action)
    @game.board.convert_notation_to_piece_type(notated_cell)
  end

  def determine_piece_color_from_action(player_action)
    @game.board.convert_notation_to_piece_color(notated_cell)
  end

Used these in game_builder.rb for testing if the stalemate feature works (these can probably be adapted to tests):

  def build_pre_stalemate_board_v1
    place_piece(0, 7, King.new('Black', player2))
    place_piece(1, 4, Queen.new('White', player1))
    place_piece(7, 0, King.new('White', player1))
  end

  def build_pre_stalemate_board_v2
    place_piece(7, 0, King.new('Black', player2))
    place_piece(2, 0, Bishop.new('Black', player2))
    place_piece(3, 5, Pawn.new('Black', player2))
    place_piece(4, 7, Pawn.new('Black', player2))
    place_piece(0, 7, King.new('White', player1))
    place_piece(0, 2, Queen.new('White', player1))
    place_piece(0, 0, Rook.new('White', player1))
    place_piece(2, 5, Knight.new('White', player1))
    place_piece(3, 7, Pawn.new('White', player1))
    place_piece(6, 7, Rook.new('White', player1))
  end

These were in my Validator tests (validator_spec.rb) but don't exist as methods anymore

describe '#cell_contains_a_piece?' do
    subject(:contains_piece_validator) { described_class.new }
    let(:cell_to_check) { instance_double('cell') }
    let(:piece_in_cell) { instance_double('piece') }

    context 'when cell does contain a piece' do
      it 'is true' do
        allow(cell_to_check).to receive(:piece).and_return(piece_in_cell)
        expect(contains_piece_validator.cell_contains_a_piece?(cell_to_check)).to be true
      end
    end

    context 'when cell does not contain a piece' do
      it 'is false' do
        allow(cell_to_check).to receive(:piece).and_return(nil)
        expect(contains_piece_validator.cell_contains_a_piece?(cell_to_check)).to be false
      end
    end
  end

  describe '#cell_contains_own_piece?' do
    subject(:contains_own_piece_validator) { described_class.new }
    let(:cell_to_check) { instance_double('cell') }
    let(:piece_in_cell) { instance_double('piece') }
    let(:player_taking_action) { instance_double('player') }
    let(:different_player) { instance_double('player') }

    context "when cell does contain player's own piece" do
      it 'is true' do
        allow(cell_to_check).to receive(:piece).and_return(piece_in_cell)
        allow(piece_in_cell).to receive(:owner).and_return(player_taking_action)
        expect(contains_own_piece_validator.cell_contains_own_piece?(cell_to_check, player_taking_action)).to be true
      end
    end

    context "when cell does not contain player's own piece" do
      it 'is false' do
        allow(cell_to_check).to receive(:piece).and_return(piece_in_cell)
        allow(piece_in_cell).to receive(:owner).and_return(different_player)
        expect(contains_own_piece_validator.cell_contains_own_piece?(cell_to_check, player_taking_action)).to be false
      end
    end
  end

These are all the tests I wrote for Validator#legal_move? before I changed how the method works (by creating separate classes for each piece type). Now these all fail :( They wouldn't be too hard to fix, just time-consuming, would just need to add board_state as an argument and change how each piece type is assigned
  describe '#legal_move?' do
    subject(:legal_move_validator) { described_class.new }
    let(:starting_cell) { instance_double('cell') }
    let(:ending_cell) { instance_double('cell') }
    let(:piece_in_starting_cell) { instance_double('piece') }

    context 'when Rook is moved from a1 to a5' do
      before do
        allow(starting_cell).to receive(:piece).and_return(piece_in_starting_cell)
        allow(piece_in_starting_cell).to receive(:type).and_return('Rook')
        # color only matters for Pawn
        allow(piece_in_starting_cell).to receive(:color)
        allow(starting_cell).to receive(:position).and_return([0, 0])
        allow(ending_cell).to receive(:position).and_return([4, 0])
      end

      it 'is a legal move' do
        expect(legal_move_validator.legal_move?(starting_cell, ending_cell)).to be true
      end
    end

    context 'when Rook is moved from a1 to b5' do
      before do
        allow(starting_cell).to receive(:piece).and_return(piece_in_starting_cell)
        allow(piece_in_starting_cell).to receive(:type).and_return('Rook')
        # color only matters for Pawn
        allow(piece_in_starting_cell).to receive(:color)
        allow(starting_cell).to receive(:position).and_return([0, 0])
        allow(ending_cell).to receive(:position).and_return([4, 1])
      end

      it 'is is not a legal move' do
        expect(legal_move_validator.legal_move?(starting_cell, ending_cell)).not_to be true
      end
    end

    context 'when Knight is moved from d5 to e7' do
      before do
        allow(starting_cell).to receive(:piece).and_return(piece_in_starting_cell)
        allow(piece_in_starting_cell).to receive(:type).and_return('Knight')
        # color only matters for Pawn
        allow(piece_in_starting_cell).to receive(:color)
        allow(starting_cell).to receive(:position).and_return([4, 3])
        allow(ending_cell).to receive(:position).and_return([6, 4])
      end

      it 'is a legal move' do
        expect(legal_move_validator.legal_move?(starting_cell, ending_cell)).to be true
      end
    end

    context 'when Knight is moved from d5 to e6' do
      before do
        allow(starting_cell).to receive(:piece).and_return(piece_in_starting_cell)
        allow(piece_in_starting_cell).to receive(:type).and_return('Knight')
        # color only matters for Pawn
        allow(piece_in_starting_cell).to receive(:color)
        allow(starting_cell).to receive(:position).and_return([4, 3])
        allow(ending_cell).to receive(:position).and_return([5, 4])
      end

      it 'is is not a legal move' do
        expect(legal_move_validator.legal_move?(starting_cell, ending_cell)).not_to be true
      end
    end

    context 'when Bishop is moved from d4 to f6' do
      before do
        allow(starting_cell).to receive(:piece).and_return(piece_in_starting_cell)
        allow(piece_in_starting_cell).to receive(:type).and_return('Bishop')
        # color only matters for Pawn
        allow(piece_in_starting_cell).to receive(:color)
        allow(starting_cell).to receive(:position).and_return([3, 3])
        allow(ending_cell).to receive(:position).and_return([5, 5])
      end

      it 'is a legal move' do
        expect(legal_move_validator.legal_move?(starting_cell, ending_cell)).to be true
      end
    end

    context 'when Bishop is moved from d4 to d7' do
      before do
        allow(starting_cell).to receive(:piece).and_return(piece_in_starting_cell)
        allow(piece_in_starting_cell).to receive(:type).and_return('Bishop')
        # color only matters for Pawn
        allow(piece_in_starting_cell).to receive(:color)
        allow(starting_cell).to receive(:position).and_return([3, 3])
        allow(ending_cell).to receive(:position).and_return([6, 3])
      end

      it 'is is not a legal move' do
        expect(legal_move_validator.legal_move?(starting_cell, ending_cell)).not_to be true
      end
    end

    context 'when Queen is moved from d4 to h4' do
      before do
        allow(starting_cell).to receive(:piece).and_return(piece_in_starting_cell)
        allow(piece_in_starting_cell).to receive(:type).and_return('Queen')
        # color only matters for Pawn
        allow(piece_in_starting_cell).to receive(:color)
        allow(starting_cell).to receive(:position).and_return([3, 3])
        allow(ending_cell).to receive(:position).and_return([3, 7])
      end

      it 'is a legal move' do
        expect(legal_move_validator.legal_move?(starting_cell, ending_cell)).to be true
      end
    end

    context 'when Queen is moved from d4 to b8' do
      before do
        allow(starting_cell).to receive(:piece).and_return(piece_in_starting_cell)
        allow(piece_in_starting_cell).to receive(:type).and_return('Queen')
        # color only matters for Pawn
        allow(piece_in_starting_cell).to receive(:color)
        allow(starting_cell).to receive(:position).and_return([3, 3])
        allow(ending_cell).to receive(:position).and_return([7, 1])
      end

      it 'is is not a legal move' do
        expect(legal_move_validator.legal_move?(starting_cell, ending_cell)).not_to be true
      end
    end

    context 'when King is moved from f5 to e6' do
      before do
        allow(starting_cell).to receive(:piece).and_return(piece_in_starting_cell)
        allow(piece_in_starting_cell).to receive(:type).and_return('King')
        # color only matters for Pawn
        allow(piece_in_starting_cell).to receive(:color)
        allow(starting_cell).to receive(:position).and_return([4, 5])
        allow(ending_cell).to receive(:position).and_return([5, 4])
      end

      it 'is a legal move' do
        expect(legal_move_validator.legal_move?(starting_cell, ending_cell)).to be true
      end
    end

    context 'when King is moved from f5 to b8' do
      before do
        allow(starting_cell).to receive(:piece).and_return(piece_in_starting_cell)
        allow(piece_in_starting_cell).to receive(:type).and_return('King')
        # color only matters for Pawn
        allow(piece_in_starting_cell).to receive(:color)
        allow(starting_cell).to receive(:position).and_return([4, 5])
        allow(ending_cell).to receive(:position).and_return([7, 1])
      end

      it 'is is not a legal move' do
        expect(legal_move_validator.legal_move?(starting_cell, ending_cell)).not_to be true
      end
    end

    context 'when White Pawn is moved from f2 to f4' do
      before do
        allow(starting_cell).to receive(:piece).and_return(piece_in_starting_cell)
        allow(piece_in_starting_cell).to receive(:type).and_return('Pawn')
        allow(piece_in_starting_cell).to receive(:color).and_return('White')
        allow(starting_cell).to receive(:position).and_return([1, 5])
        allow(ending_cell).to receive(:position).and_return([3, 5])
      end

      it 'is a legal move' do
        expect(legal_move_validator.legal_move?(starting_cell, ending_cell)).to be true
      end
    end

    context 'when White Pawn is moved from c4 to c5' do
      before do
        allow(starting_cell).to receive(:piece).and_return(piece_in_starting_cell)
        allow(piece_in_starting_cell).to receive(:type).and_return('Pawn')
        allow(piece_in_starting_cell).to receive(:color).and_return('White')
        allow(starting_cell).to receive(:position).and_return([3, 2])
        allow(ending_cell).to receive(:position).and_return([4, 2])
      end

      it 'is a legal move' do
        expect(legal_move_validator.legal_move?(starting_cell, ending_cell)).to be true
      end
    end

    context 'when White Pawn is moved from c4 to d5' do
      before do
        allow(starting_cell).to receive(:piece).and_return(piece_in_starting_cell)
        allow(piece_in_starting_cell).to receive(:type).and_return('Pawn')
        allow(piece_in_starting_cell).to receive(:color).and_return('White')
        allow(starting_cell).to receive(:position).and_return([3, 2])
        allow(ending_cell).to receive(:position).and_return([4, 3])
      end

      it 'is a legal move' do
        expect(legal_move_validator.legal_move?(starting_cell, ending_cell)).to be true
      end
    end

    context 'when White Pawn is moved from f3 to f5' do
      before do
        allow(starting_cell).to receive(:piece).and_return(piece_in_starting_cell)
        allow(piece_in_starting_cell).to receive(:type).and_return('Pawn')
        allow(piece_in_starting_cell).to receive(:color).and_return('White')
        allow(starting_cell).to receive(:position).and_return([2, 5])
        allow(ending_cell).to receive(:position).and_return([4, 5])
      end

      it 'is is not a legal move' do
        expect(legal_move_validator.legal_move?(starting_cell, ending_cell)).not_to be true
      end
    end

    context 'when White Pawn is moved from f3 to f2' do
      before do
        allow(starting_cell).to receive(:piece).and_return(piece_in_starting_cell)
        allow(piece_in_starting_cell).to receive(:type).and_return('Pawn')
        allow(piece_in_starting_cell).to receive(:color).and_return('White')
        allow(starting_cell).to receive(:position).and_return([2, 5])
        allow(ending_cell).to receive(:position).and_return([1, 5])
      end

      it 'is is not a legal move' do
        expect(legal_move_validator.legal_move?(starting_cell, ending_cell)).not_to be true
      end
    end

    context 'when Black Pawn is moved from f7 to f5' do
      before do
        allow(starting_cell).to receive(:piece).and_return(piece_in_starting_cell)
        allow(piece_in_starting_cell).to receive(:type).and_return('Pawn')
        allow(piece_in_starting_cell).to receive(:color).and_return('Black')
        allow(starting_cell).to receive(:position).and_return([6, 5])
        allow(ending_cell).to receive(:position).and_return([4, 5])
      end

      it 'is a legal move' do
        expect(legal_move_validator.legal_move?(starting_cell, ending_cell)).to be true
      end
    end

    context 'when Black Pawn is moved from c5 to c4' do
      before do
        allow(starting_cell).to receive(:piece).and_return(piece_in_starting_cell)
        allow(piece_in_starting_cell).to receive(:type).and_return('Pawn')
        allow(piece_in_starting_cell).to receive(:color).and_return('Black')
        allow(starting_cell).to receive(:position).and_return([4, 2])
        allow(ending_cell).to receive(:position).and_return([3, 2])
      end

      it 'is a legal move' do
        expect(legal_move_validator.legal_move?(starting_cell, ending_cell)).to be true
      end
    end

    context 'when Black Pawn is moved from c5 to d4' do
      before do
        allow(starting_cell).to receive(:piece).and_return(piece_in_starting_cell)
        allow(piece_in_starting_cell).to receive(:type).and_return('Pawn')
        allow(piece_in_starting_cell).to receive(:color).and_return('Black')
        allow(starting_cell).to receive(:position).and_return([4, 2])
        allow(ending_cell).to receive(:position).and_return([3, 3])
      end

      it 'is a legal move' do
        expect(legal_move_validator.legal_move?(starting_cell, ending_cell)).to be true
      end
    end

    context 'when Black Pawn is moved from f6 to f4' do
      before do
        allow(starting_cell).to receive(:piece).and_return(piece_in_starting_cell)
        allow(piece_in_starting_cell).to receive(:type).and_return('Pawn')
        allow(piece_in_starting_cell).to receive(:color).and_return('Black')
        allow(starting_cell).to receive(:position).and_return([5, 5])
        allow(ending_cell).to receive(:position).and_return([3, 5])
      end

      it 'is is not a legal move' do
        expect(legal_move_validator.legal_move?(starting_cell, ending_cell)).not_to be true
      end
    end

    context 'when Black Pawn is moved from f5 to f6' do
      before do
        allow(starting_cell).to receive(:piece).and_return(piece_in_starting_cell)
        allow(piece_in_starting_cell).to receive(:type).and_return('Pawn')
        allow(piece_in_starting_cell).to receive(:color).and_return('Black')
        allow(starting_cell).to receive(:position).and_return([3, 5])
        allow(ending_cell).to receive(:position).and_return([4, 5])
      end

      it 'is is not a legal move' do
        expect(legal_move_validator.legal_move?(starting_cell, ending_cell)).not_to be true
      end
    end
  end
