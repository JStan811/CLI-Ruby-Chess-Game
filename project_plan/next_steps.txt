1. W/e order for these:
  - Write tests
    - Think about or look up common check and checkmate positions and create boards in those positions (or one move prior to them) to test
  - turn all displayed messages in Chess into Interface methods
  - Improve UI - instructions, all display messages, etc.
  - enforce save file name (when saving and loading) somehow (to stop user from entering nothing or a space, or already exists, etc.)
  - add in support for Castling, En passant, and Promotion
  - tell players which color and side they are
  - for some reason the load selection accepts single characters and chooses the last option?

2. At the end, re-read the illustrated chess rules site to see if I missed anything
  - Notes
    - Add stalemate coverage to my game
    - Add Castling, Promotion, En Passant

3. at the end use the rubocop command line thing, also read through everything and refactor

4. Update Readme and Replit

Extras
  - Decide player color randomly
  - Add new game? feature when game ends
  - Code for standard chess notation: see branch standard_notation
  - Move piece class files into lib/pieces
  - Potential improvement (but big change): code board as a grid object, one where each cell has pointers to all of its neighbors
  - Look at another project to see where my require_relatives should be? (in the driver script/test scripts or within each class?)
  - Add display messages for different events: "Pawn captures pawn.", "Pawn promoted to Queen.", "Player 2 King in check", etc.
  - Add support for game draws (see Wiki for types).
  - flip the board when active player switches
  - can I make symbols bigger?
