- look at project_plan/chess_psuedocode.txt and start there

- write valid_destination?(starting, target)
  - First checks if target is in list of destinations from starting
  - Then checks if there is a piece in the way
  - At some level I'll need to change based on given type
  - If there is player's own piece in target, invalid
  - If there is opponent's piece in target, valid and opp. piece is captured

- clean up MoveValidator#validation list methods

- Write tests

- Finish board design, see last commit for more info
  - can I make symbols bigger?

- Consider moving all the game setup methods into another class (maybe ChessSetup?), then using Chess(or GameMaster) for just managing the game
  - Complete

- for Interface#solicit_player_action, create some mechanism that allows the player to enter 'help' for instructions about Chess notation

Extras
  - Decide player color randomly
  - Add functionality for special moves - Castling, En passant, Promotion
  - Code for standard chess notation: Validatorvalidate_notation_standard
